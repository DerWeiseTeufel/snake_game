class Graph:
    Gr = dict(dict())
    dtype = str
    Weighted = True
    Directed = True
    def __init__(self, DICT, dir, w):
        self.Gr = DICT.copy()
        self.Directed = dir
        self.Weighted = w
    @classmethod
    def createFromFile(cls, path, dtype=str):
        temp = dict(dict())
        flag = True
        with open(path) as f:
            for line in f:
                a = [x for x in line.upper().split()]
                if flag:
                    d = a[0].upper()
                    if d == "YES" or d == "DIRECTED":
                        d = True
                    elif d == "NO" or d == "UNDIRECTED":
                        d = False
                    else:
                        print(f"{cmd_fail} to read")
                        return None
                    w = a[1].upper()
                    if w == "YES" or w == "WEIGHTED":
                        w = True
                    elif w == "NO" or w == "WEIGHTED":
                        w = False
                    else:
                        print(cmd_fail)
                        return None
                    t = a[2].upper()
                    if (t == "STRING"):
                        t = type("str")
                    elif (t == "INT"):
                        t = type(3)
                    elif (t == "DOUBLE"):
                        t = type(3.5)
                    else:
                        print(cmd_fail)
                        return None
                    flag = False
                    
                    weighted = w
                    dir = d
                    dtype = t
                    continue
                if weighted and len(a) == 2:
                    weighted = False
                if len(a) < 2:
                    print(cmd_fail)
                    return
                v = dtype(a[0])
                to = dtype(a[1])
                if v not in temp:
                    temp[v] = dict()
                if to not in temp:
                    temp[to] = dict()
                if weighted:
                    temp[v][to] = int(a[2])
                else:
                    temp[v][to] = 0
                if not dir:
                    if weighted:
                        temp[to][v] = int(a[2])
                    else:
                        temp[to][v] = 0
        try:
            return cls(temp, dir, weighted)
        except:
            print("PROCESS FAILED")
            return None


    @classmethod
    def createConsole(cls, n, dir = True, weighted = True, dtype = str):
        temp = dict(dict())
        for _ in range(n):
            a = [x for x in input().split()]
            if weighted and len(a) == 2:
                weighted = False
            if len(a)<2:
                print(cmd_fail)
                return
            v = dtype(a[0])
            to = dtype(a[1])
            if v not in temp:
                temp[v] = dict()
            if to not in temp:
                temp[to] = dict()
            if weighted:
                temp[v][to] = int(a[2])
            else:
                temp[v][to] = 0
            if not dir:
                if weighted:
                    temp[to][v] = int(a[2])
                else:
                    temp[to][v] = 0

        return cls(temp,dir,weighted)

    @classmethod
    def createCopy(cls, other):
        return cls(other.Gr, other.Directed, other.Weighted)
    def Show(self):
        print(self.Gr)
        for v in self.Gr.values():
            for e in v.values():
                print(e)
    def AddVertex(self, name):
        if (self.Gr.get(name) == None):
            self.Gr.setdefault(name, dict())
            return True
        return False

    def AddEdge(self, v, to, w = None):
        if (self.Weighted and w == None) or not self.Weighted and w or not self.Gr.get(v) or not self.Gr.get(to) or self.Gr[v].get(to) != None:
            return False

        self.Gr[v][to] = w
        if not self.Directed:
            self.Gr[to][v] = w
        return True


    def DelEdge(self, v, to):
        if self.Gr.get(v) != None and self.Gr.get(v) != None and self.Gr[v].get(to)!= None:
            self.Gr[v].pop(to)
            if not self.Directed:
                self.Gr[to].pop(v)
            return True
        return False
    def DelNode(self, v):
        if self.Gr.get(v) != None:
            self.Gr.pop(v)
            for from_v in self.Gr.keys():
                if self.Gr[from_v].get(v) != None:
                    self.Gr[from_v].pop(v)

            return True
        return False

cmd_create = "CREATE_GRAPH"
cmd_edge = "ADD_EDGE"
cmd_node = "ADD_NODE"
cmd_del_edge = "DELETE_EDGE"
cmd_del_node = "DELETE_NODE"
cmd_print = "PRINT_GRAPH"
cmd_exit = "EXIT"
cmd_fail = "FAILED"
cmd_file = "FROM_FILE"
cmd_ok = "SUCCESS"
def Menu():
    print(cmd_create)
    print(cmd_file)
    print(cmd_edge)
    print(cmd_node)
    print(cmd_del_edge)
    print(cmd_del_node)
    print(cmd_print)
    print(cmd_exit)

"""
n = int(input())
gr = Graph.createConsole(n)
gr.Show()
gr.AddVertex(input())
gr.Show()
a = input().split()
gr.AddEdge(a[0], a[1], int(a[2]))
gr.Show()
a = input().split()
gr.DelEdge(a[0],a[1])
gr.Show()
"""
flag = True
while True:

    while flag:
        print("Hello, User, this is Graph, you can line your commands just like they are listed below: ")
        print(cmd_create)
        print(cmd_file)
        decision = input().upper()
        if decision == cmd_create:#CREATE FROM CONSOLE
            print("NUMBER OF LINES")
            n = int(input().split()[0])
            print("DIRECTED")
            d = input().upper()
            if d == "YES" or d == "DIRECTED":
                d = True
            elif d == "NO" or d == "UNDRIRECTED":
                d = False
            else:
                print(cmd_fail)
                continue
            print("WEIGHTED")
            w = input().upper()
            if w == "YES" or w == "WEIGHTED":
                w = True
            elif w == "NO" or w == "UNWEIGHTED":
                w = False
            else:
                print(cmd_fail)
                continue
            print("TYPE")
            t = input()
            if(t == "string"):
                t = type("str")
            elif(t == "int"):
                t = type(3)
            elif(t == "double"):
                t = type(3.5)
            else:
                print(cmd_fail)
                continue
            ngr = Graph.createConsole(n,d,w) #CONSTRUCTOR CALL
            flag = False
        if decision == cmd_file:#CREATE FROM FILE
            path = input()
            """
            print("DIRECTED")
            d = input().upper()
            if d == "YES" or d == "DIRECTED":
                d = True
            elif d == "NO" or d == "UNDRIRECTED":
                d = False
            else:
                print(cmd_fail)
                continue
            print("WEIGHTED")
            w = input().upper()
            if w == "YES" or w == "WEIGHTED":
                w = True
            elif w == "NO" or w == "UNWEIGHTED":
                w = False
            else:
                print(cmd_fail)
                continue"""
            ngr = Graph.createFromFile(path)
            flag = False
        else:
            print(cmd_fail)
    Menu()
    decision = (input().upper()).split()
    if not decision:
        print(cmd_fail)
        continue
    if(decision[0] == cmd_create):
        print("NUMBER OF LINES")
        n = int(input().split()[0])
        print("DIRECTED")
        d = input().upper()
        if d == "YES" or d == "DIRECTED":
            d = True
        elif d == "NO" or d == "UNDRIRECTED":
            d = False
        else:
            print(cmd_fail)
            continue
        print("WEIGHTED")
        w = input().upper()
        if w == "YES" or w == "WEIGHTED":
            w = True
        elif w == "NO" or w == "WEIGHTED":
            w = False
        else:
            print(cmd_fail)
            continue

        print("TYPE")
        t = input()
        if (t == "string"):
            t = type("str")
        elif (t == "int"):
            t = type(3)
        elif (t == "double"):
            t = type(3.5)
        else:
            print(cmd_fail)
            continue
        ngr = Graph.createConsole(n, d, w, t)
        continue
    if decision[0] == cmd_print:
        if ngr.Directed:
            print("DIRECTED")
        else:
            print("UNDIRECTED")
        if ngr.Weighted:
            print("WEIGHTED")
        else:
            print("UNWEIGHTED")
        ngr.Show()
        continue

    if decision[0] == cmd_edge:
        print("FROM:")
        v = ngr.dtype(input())
        print("TO:")
        v2 = ngr.dtype(input())

        if ngr.Weighted:
            print("WEIGHT:")
            w = int(input())
        if not ngr.AddEdge(v, v2, w):
            print(cmd_fail)
        continue
    if decision[0] == cmd_node:
        print("NEW:")
        node = input().split()[0].upper()
        if not ngr.AddVertex(node):
            print(cmd_fail)
        continue
    if decision[0] == cmd_del_edge:
        print("FROM")
        fr_del = input()
        print("TO")
        to_del = input()
        if ngr.DelEdge(fr_del, to_del):
            print(cmd_ok)
        else:
            print(cmd_fail)
        continue
    if decision[0] == cmd_file:
        path = input()
        ngr = Graph.createFromFile(path)
        continue
    if decision[0] == cmd_del_node:
        print("WHICH ONE")
        v_to_del = ngr.dtype(input())
        if ngr.DelNode(v_to_del):
            print(cmd_ok)
        else:
            print(cmd_fail)
        continue
        
    if decision[0] == cmd_exit:
        print("Rate my performance:")
        n = int(input())
        break
    print(cmd_fail)
    print("try again")


